type NanoPopOptions = {
    forceApplyOnFailure?: boolean;
    container?: DOMRect;
    position?: NanoPopPositionCombination;
    margin?: number;
    variantFlipOrder?: VariantFlipOrder;
    positionFlipOrder?: PositionFlipOrder;
};
type VariantFlipOrder = {
    start: string;
    middle: string;
    end: string;
};
type PositionFlipOrder = {
    top: string;
    right: string;
    bottom: string;
    left: string;
};
type NanoPopPosition = 'top' | 'left' | 'bottom' | 'right';
type NanoPopPositionCombination = 'top-start' | 'top-middle' | 'top-end' | 'left-start' | 'left-middle' | 'left-end' | 'right-start' | 'right-middle' | 'right-end' | 'bottom-start' | 'bottom-middle' | 'bottom-end' | NanoPopPosition;
type InternalSettings = {
    forceApplyOnFailure: boolean;
    container: DOMRect;
    position: NanoPopPositionCombination;
    margin: number;
    variantFlipOrder: VariantFlipOrder;
    positionFlipOrder: PositionFlipOrder;
    reference: HTMLElement;
    popper: HTMLElement;
};
declare class NanoPop {
    static readonly version: string;
    static defaultVariantFlipOrder: {
        start: string;
        middle: string;
        end: string;
    };
    static defaultPositionFlipOrder: {
        top: string;
        right: string;
        bottom: string;
        left: string;
    };
    private _config;
    constructor(reference: HTMLElement, popper: HTMLElement, { positionFlipOrder, variantFlipOrder, container, forceApplyOnFailure, margin, position }?: NanoPopOptions);
    /**
     * Re-aligns the element
     * @param opt Optional, updated settings
     */
    /**
     * Re-aligns the element
     * @param opt Optional, updated settings
     */
    update(opt?: Partial<InternalSettings>, _force?: boolean): string | null;
}
export { NanoPopOptions, VariantFlipOrder, PositionFlipOrder, NanoPopPosition, NanoPopPositionCombination, NanoPop };
